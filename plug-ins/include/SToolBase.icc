// Dear emacs, this is -*- c++ -*-
// $Id$
/***************************************************************************
 * @Project: SFrame - ROOT-based analysis framework for ATLAS
 * @Package: Plug-ins
 *
 * @author Stefan Ask       <Stefan.Ask@cern.ch>           - Manchester
 * @author David Berge      <David.Berge@cern.ch>          - CERN
 * @author Johannes Haller  <Johannes.Haller@cern.ch>      - Hamburg
 * @author A. Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN/Debrecen
 *
 ***************************************************************************/

#ifndef SFRAME_PLUGINS_SToolBase_ICC
#define SFRAME_PLUGINS_SToolBase_ICC

template< class Type >
SToolBaseT< Type >::SToolBaseT()
   : m_logger( "SToolBase" ), m_parent( 0 ) {

}

template< class Type >
SToolBaseT< Type >::SToolBaseT( ParentType* parent )
   : m_logger( "SToolBase" ), m_parent( parent ) {

}

template< class Type >
typename SToolBaseT< Type >::ParentType* SToolBaseT< Type >::GetParent() const {

   // Print a warning if somebody tries to do something with the tool without
   // giving it a valid parent:
   if( ! m_parent ) {
      REPORT_ERROR( "No parent has been specified for the tool. The code is "
                    "probably going to crash!" );
   }

   return m_parent;
}

template< class Type >
void SToolBaseT< Type >::
SetParent( typename SToolBaseT< Type >::ParentType* parent ) {

   m_parent = parent;
   return;
}

template< class Type >
template< class T >
T* SToolBaseT< Type >::Book( const T& histo,
                             const char* directory,
                             Bool_t inFile ) throw( SError ) {

   return GetParent()->template Book( histo, directory, inFile );
}

template< class Type >
template< class T >
T* SToolBaseT< Type >::Retrieve( const char* name,
                                 const char* directory,
                                 Bool_t outputOnly ) throw( SError ) {

   return GetParent()->template Retrieve< T >( name, directory, outputOnly );
}

template< class Type >
template< class T >
std::vector< T* >
SToolBaseT< Type >::RetrieveAll( const char* name,
                                 const char* directory ) throw( SError ) {

   return GetParent()->template RetrieveAll< T >( name, directory );
}

template< class Type >
void SToolBaseT< Type >::WriteObj( const TObject& obj,
                                   const char* directory ) throw( SError ) {

   GetParent()->WriteObj( obj, directory );
   return;
}

template< class Type >
TH1* SToolBaseT< Type >::Hist( const char* name, const char* dir ) {

   return GetParent()->Hist( name, dir );
}

template< class Type >
template< typename T >
bool SToolBaseT< Type >::ConnectVariable( const char* treeName,
                                          const char* branchName,
                                          T& variable ) throw ( SError ) {

   return GetParent()->template ConnectVariable( treeName, branchName,
                                                 variable );
}

template< class Type >
template< typename T >
TBranch*
SToolBaseT< Type >::DeclareVariable( T& obj, const char* name,
                                     const char* treeName ) throw( SError ) {

   return GetParent()->template DeclareVariable( obj, name, treeName );
}

template< class Type >
TTree* SToolBaseT< Type >::
GetMetadataTree( const char* name ) const throw( SError ) {

   return GetParent()->GetMetadataTree( name );
}

template< class Type >
TTree* SToolBaseT< Type >::
GetInputMetadataTree( const char* name ) const throw( SError ) {

   return GetParent()->GetInputMetadataTree( name );
}

template< class Type >
TTree* SToolBaseT< Type >::
GetOutputMetadataTree( const char* name ) const throw( SError ) {

   return GetParent()->GetOutputMetadataTree( name );
}

template< class Type >
TTree* SToolBaseT< Type >::
GetInputTree( const char* treeName ) const throw( SError ) {

   return GetParent()->GetInputTree( treeName );
}

template< class Type >
TTree* SToolBaseT< Type >::
GetOutputTree( const char* treeName ) const throw( SError ) {

   return GetParent()->GetOutputTree( treeName );
}

template< class Type >
template< typename T >
void SToolBaseT< Type >::DeclareProperty( const std::string& name, T& value ) {

   GetParent()->DeclareProperty( name, value );
   return;
}

template< class Type >
void SToolBaseT< Type >::AddConfigObject( TObject* object ) {

   GetParent()->AddConfigObject( object );
   return;
}

template< class Type >
TObject* SToolBaseT< Type >::GetConfigObject( const char* name ) const {

   return GetParent()->GetConfigObject( name );
}

template< class Type >
void SToolBaseT< Type >::SetLogName( const char* name ) {

   m_logger.SetSource( name );
   return;
}

#endif // SFRAME_PLUGINS_SToolBase_ICC
