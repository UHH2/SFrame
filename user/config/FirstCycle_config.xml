<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE JobConfiguration PUBLIC "" "JobConfig.dtd">

<!-- ======================================================================= -->
<!-- @Project: SFrame - ROOT-based analysis framework for ATLAS              -->
<!-- @Package: User                                                          -->
<!--                                                                         -->
<!-- @author Stefan Ask       <Stefan.Ask@cern.ch>           - Manchester    -->
<!-- @author David Berge      <David.Berge@cern.ch>          - CERN          -->
<!-- @author Johannes Haller  <Johannes.Haller@cern.ch>      - Hamburg       -->
<!-- @author A. Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN/Debrecen -->
<!--                                                                         -->
<!-- ======================================================================= -->

<!--OutputLevel: Possibilities: VERBOSE, DEBUG, INFO, WARNING, ERROR, FATAL, ALWAYS -->
<JobConfiguration JobName="TestJob" OutputLevel="DEBUG">

  <!-- List of libraries to be loaded for the analysis.             -->
  <!-- Note the MathCore is needed to import the dictionary for the -->
  <!-- SParticle base class.                                        -->
  <Library Name="libMathCore" />
  <Library Name="libSFramePlugIns" />
  <Library Name="libSFrameUser" />

  <!-- List of cycles to be executed.                                       -->
  <!-- Name: specifies the class name to be executed in this cycle          -->
  <!-- name of Output-File: automically give by Name+Type+PostFix+".root"   -->
  <!-- OutputDirectory: directory to which output is written                -->
  <!--                  must finish with an "/"                             --> 
  <!-- TargetLumi: luminosity value the output of this cycle is weighted to -->
  <Cycle Name="FirstCycle" OutputDirectory="" PostFix="" TargetLumi="1." >

    <!-- list of input data for given data type                                   -->
    <!-- type: type of events: e.g. "Zee", "ttbar", ...                           -->
    <!--       names are up to the user; exception: for data use "data"!          -->  
    <!-- Lumi: either specify it in InputData (ie. the luminosity sum of all <In> -->
    <!--       or specify it in each <In> separately                              -->
    <!--       In case both are filled the sum in <InputData> is used.            -->
    <!--       The values in <In> are ignored                                     -->
    <!--       units: [pb^-1]                                                     -->
    <!-- NEventsMax: optional, specifies the number of events that are looped     -->
    <!--             over.                                                        -->
    <!--             If not existant: all events of this InputData set are used   -->
    <!--             Please Note: NEventsMax is a mean to shorten the event loop  -->
    <!--                          for test runs;                                  -->
    <!--             the weights of the events are adapted.                       -->
    <!--             For final plots, i.e. maximum statistics, NEventsMax         -->
    <!--             shouldn't be used.                                           -->
    <!-- NEventsSkip: optional, specifies the number of events that should be     -->
    <!--              disregarded at the beginning of the InputData.              -->
    <!--                                                                          -->
    <!-- Some run-time checking is done on these parameters that they would make  -->
    <!-- sense, but in general be careful when using them.                        -->

    <InputData Type="Data1" Version="Reco" Lumi="0." NEventsMax="2000" NEventsSkip="2000" >

      <!-- List of cuts that have been applied on generator level, needed for -->
      <!-- the weighting.                                                     -->
      <!-- For proper weighting the variable that was cut on must be stored,  -->
      <!-- in each event.                                                     -->
      <!-- We assume that it is stored directly in a "Tree"                   -->
      <!-- Formula: String formula of the cut that has been applied           -->
      <GeneratorCut Tree="FullRec0" Formula="MissingEt>10000" />

      <!-- List of input files                -->
      <!-- Lumi: optional, see comments above -->
      <In FileName="/afs/cern.ch/atlas/maxidisk/d181/SFrame/StacoTau1p3p__dcache-pythiazeeSUSYView_1.AAN.root" Lumi="209.8" />

      <!-- Specification of the input and output trees. -->
      <!-- Name: Name of the tree in the ROOT file      -->
      <InputTree Name="CollectionTree" />
      <InputTree Name="FullRec0" />
      <OutputTree Name="FirstCycleTree" />

  </InputData>
  <InputData Type="Data2" Version="Reco" Lumi="0." >

      <!-- List of cuts that have been applied on generator level, needed for -->
      <!-- the weighting                                                      -->
      <GeneratorCut Tree="FullRec0" Formula="MissingEt>5000" />
      <GeneratorCut Tree="FullRec0" Formula="SumEt>200000" />

      <!-- list of input files -->
      <In FileName="/afs/cern.ch/atlas/maxidisk/d181/SFrame/StacoTau1p3p__dcache-pythiazeeSUSYView_1.AAN.root" Lumi="209.8" />

      <!-- Specification of the input and output trees. -->
      <InputTree Name="CollectionTree" />
      <InputTree Name="FullRec0" />
      <OutputTree Name="FirstCycleTree" />

    </InputData>

    <!-- User configuration: properties                                -->
    <!--  The user can assign various types of C++ objects to property -->
    <!--  names in the constructor of the cycle. The properties are    -->
    <!--  then set automatically in the C++ code according to the      -->
    <!--  configuration in the XML file.                               -->
    <!-- Name: Name of the property (as set in C++)                    -->
    <!-- Value: String representation of the value                     -->
    <UserConfig>
      <Item Name="TestString" Value="It works!" />
      <Item Name="TestInt" Value="666" />
      <Item Name="TestDouble" Value="3.141592" />
      <Item Name="TestBool" Value="True" />
      <Item Name="TestIntVector" Value="5 4 3 2 1" />
      <Item Name="TestDoubleVector" Value="3.141592 2.718281" />
      <Item Name="TestStringVector" Value="one two three" />
      <Item Name="TestBoolVector" Value="True False 1 0" />
      <Item Name="RecoTreeString" Value="FullRec0" />
    </UserConfig>

  </Cycle>

</JobConfiguration>
