// Dear emacs, this is -*- c++ -*-
// $Id: SCycleBaseHist.icc,v 1.2 2007-11-22 18:19:25 krasznaa Exp $
/***************************************************************************
 * @Project: SFrame - ROOT-based analysis framework for ATLAS
 * @Package: Core
 *
 * @author Stefan Ask       <Stefan.Ask@cern.ch>           - Manchester
 * @author David Berge      <David.Berge@cern.ch>          - CERN
 * @author Johannes Haller  <Johannes.Haller@cern.ch>      - Hamburg
 * @author A. Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN/Debrecen
 *
 ***************************************************************************/

#ifndef SFRAME_CORE_SCycleBaseHist_ICC
#define SFRAME_CORE_SCycleBaseHist_ICC

// ROOT include(s):
#include <TROOT.h>
#include <TH1.h>

/**
 * Function for creating any kind of object inheriting from TH1 and
 * which has a correct dictionary loaded, in the output file. You either
 * have to give it an already existing object, which will be copied to
 * the output, or you can use a formalism like this:
 *
 * <code>
 *   TH1D* hist = Book( TH1D( "hist", "Histogram", 100, 0.0, 100.0 ) );
 * </code>
 *
 * @warning The function returns a pointer to the created object in
 *          the file. It is a good practice to keep the pointer to
 *          the object, as SCycleBaseHist::Book and
 *          SCycleBaseHist::Retrieve are quite slow.
 *
 * @see SCycleBaseHist::Retrieve
 */
template< class T >
T* SCycleBaseHist::Book( const T& histo,
                         const char* directory ) throw( SError ) {

   // Find the correct directory in the output file:
   TDirectory* dir = 0;
   if( directory ) {
      dir = this->CdInOutput( directory );
   } else {
      dir = m_outputFile;
   }
   dir->cd();

   // Search for an object with this name in the directory. If there is
   // none, create one:
   T* h = dynamic_cast< T* >( dir->FindObject( histo.GetName() ) );
   if( ! h ) {
      h = dynamic_cast< T* >( histo.Clone() );
   }

   gROOT->cd(); // So that the temporary objects would not be
                // created in the file itself...

   if( ( ! TH1::GetDefaultSumw2() ) && ( ! h->GetSumw2N() ) ) {
      h->Sumw2();
   }

   return h;
}

/**
 * Function searching for any kind of object (inheriting from TObject)
 * in the output file. You have to specify the return type to the
 * function explicitely, as the compiler can't know this from the
 * argument list.
 *
 * Example:
 *
 * <code>
 *   TH1* hist = Retrieve< TH1 >( "hist" );
 * </code>
 *
 * @see SCycleBaseHist::Book
 */
template< class T >
T* SCycleBaseHist::Retrieve( const char* name,
                             const char* directory ) throw( SError ) {

   // Look for an object with this name in the specified directory:
   TDirectory* dir = 0;
   if( directory ) {
      dir = this->CdInOutput( directory );
   } else {
      dir = m_outputFile;
   }
   T* h = dynamic_cast< T* >( dir->FindObject( name ) );
   if( ! h ) {
      m_logger << ERROR << "Couldn't access object with name: " << name
               << " in directory: " << directory << SLogger::endmsg;
   }

   gROOT->cd(); // So that the temporary objects would not be
                // created in the file itself...

   return h;
}

#endif // SFRAME_CORE_SCycleBaseHist_ICC
