2011.02.18 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added a little hack to SCycleBaseExec so that it would
	  only call BeginInputFile(...) once at the beginning of the
	  job when running in LOCAL mode. Previously this function
	  was always called twice for the first file in this mode.
	* Tried to check in all running scenarios that the modification
	  is not disruptive.

2011.02.14 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Fixed a previous limitation of the code, that it would
	  only process a maximum of 1E8 events if "EvMax" was set
	  to "-1" in the configuration. Now the code uses the
	  maximal number that can be expressed with Long64_t.

2011.02.14 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Made the type checking in the "primitive version" of
	  ConnectVariable(...) more permissive. The previous
	  implementation was very much based on the conventions
	  of ATLAS ntuples. With the new one it's now even possible
	  to use branches which have multiple leaves for multiple
	  primitives. While this is not used in ATLAS, it's one of the
	  common ways of creating a TTree.
	  (See: http://root.cern.ch/root/html528/TTree.html)

2011.02.10 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added a cleanup function to SCycleBaseNTuple. Justin
	  Griffiths reported that under certain conditions dangling
	  TTree pointers can cause problems. Now the code should
	  always clean up after itself.

2011.02.09 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Extended SInputData with the current entry number
	  This can be used to feed the D3PDReader objects with
	  the information.
	* Updated SCycleBaseExec so that it fills this information.
	* Fixed a problem in SCycleBaseHist::Hist(...) in which it
	  could get into an improper state when the user asked for
	  a non-existent histogram.

2010.12.03 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Re-introduced the ClassDef(...) and ClassImp(...) macros
	  for the SCycleBase component classes. These macros are
	  necessary if you want to hide some member variables from
	  the dictionary generation. This is unfortunately a needed
	  feature for making the code work without WARNING/ERROR
	  messages in the ROOT trunk. (To become 5.28 soon.)
	* Hid some of the SCycleBase variables from the dictionary
	  generator.

2010.12.01 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Tried to fix the ERROR messages coming from the SCycleBaseConfig
	  class in ROOT 5.28, but didn't succeed for now. Issue is
	  followed up on: http://savannah.cern.ch/bugs/?75727
	* Added the long missing functionality to be able to retrieve
	  histograms and other kinds of objects from the input files.
	  Now the Retrieve<...>(...) function of SCycleBaseHist looks
	  first in the output object list for the requested object,
	  and if it doesn't find it there, it looks in the input file.

2010.11.25 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Removed the Cintex specific code from the core library.

2010.11.05 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Linked the SFrameCore library against the Cintex ROOT library.
	  It turns out that this ROOT library has been with us since
	  a long time (it's already in ROOT 5.20). So explicitly
	  relying on it is not a problem.
	* This should solve the issues seen by people using a ROOT
	  version coupled to an ATLAS offline software release.

2010.10.27 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Moved some of the functions of SCycleBaseConfig,
	  SCycleBaseHist and SCycleBaseNTuple into public scope.
	  Having them as protected function and declaring all
	  SToolBase incarnations as friends of these classes was just
	  not scaling...

2010.09.27 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Re-wrote how ConnectVariable(...) checks whether the user
	  tries to connect the correct type of primitive to a branch.
	  The previous implementation used a convention of the ATLAS
	  D3PDs which is not followed anymore...

2010.09.20 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Migrated back the change from the development branch that
	  enables the user to connect polymorphic object pointers to
	  input ntuple branches.
	* Unfortunately the code to write out poymorphic objects in
	  a smart way to the output is still not fully solved. (I can't
	  get the sub-branch names to inherit the name of the main branch
	  as prefix correctly...)

2010.08.20 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Changed the order of the TTree::SetBranchAddress(...) and
	  TTree::SetBranchStatus(...) calls in the ConnectVariable(...)
	  functions. Apparently putting them in the wrong order can
	  disable the reading of the branches completely... :-/

2010.08.16 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Put the function calls operation on the cache inside #if
	  statements, as these function calls are not available in old ROOT
	  releases. So SFrameARA would not be able to compile with them.

2010.08.16 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Made the GetInputTree(...) and GetOutputTree(...) functions
	  of SCycleBaseNTuple protected. This should help users in some
	  special circumstances.
	* Started playing with TTreeCache, but not much effect on the
	  performance so far. Will talk with Gerri next week (when he's
	  back from vacation) to see how caching could be used effectively
	  in SFrame.

2010.08.06 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Modified the friend relations of the classes a little bit in
	  order to account for the changes in the SToolBase class.

2010.08.04 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added a few non-const Write(...) functions to various classes.
	  This is to get rid of some of the overloaded virtual warnings
	  of GCC. However I still couldn't get rid of all these warnings.
	  TObject has a function called ExecuteEvent(...) and even if I
	  remove the warning from the compilation of SCycleBaseExec, the
	  users would still have to modify their cycles as well.
	  So for now I leave the flag that turns the overloaded virtual
	  warning off active in the Makefile.

2010.08.02 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Modified the friend-relations of SCycleNTupleBase to make
	  it possible to use SOutputVariables-derived classes with this
	  template parameter.

2010.06.30 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Re-designed the SInputData class in some details. Now the
	  types of input and output trees can be extended by the
	  libraries built on top of SFrame. (Like SFrameARA.)
	* Modifed all the code handling the SInputData class (basically
	  all SFrame classes...) to use the new "formalism".
	* Added some macros to SLogger.h to help with printing
	  verbose and error messages with more information on
	  where they're coming from in the code.
	* Added a new helper class, STreeTypeDecoder that is used
	  by the framework so that it doesn't have to know about all
	  the possible tree types in the base library.

2010.06.21 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Fixed the long-standing double-event-issue in the output
	  TTree-s...
	* SFileMerger was modified to take it into account that a single
	  object might be present in the input files with multiple
	  versions/cycles. In this case, since the code always asks for
	  the latest version of the object for the merging, it has to
	  process that object only once. Previously it processed every
	  object (TTree) as many times as they appeared in the list of
	  keys in the input file. (Most of the time twice in some older
	  versions of ROOT.)

2010.05.20 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added a new property to SInputData: SkipValid
	  When this property is set to kTRUE, the validation of the files
	  (datasets) in that SInputData is skipped. This can be very
	  useful when running on a lot of individually declared files
	  on a remote PROOF farm. (Since the input files are remote,
	  reading from all of them can take a *long* time.)
	* The property can only be used when all the events from the
	  InputData are to be processed. If the configuration specifies
	  that only a subset of events should be processed, the
	  validation is forced. (So that the event weigthing can be
	  correct.)

2010.05.12 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Made the code aware that ROOT version "5.26/00-proof" can also
	  handle multiple datasets per query (per InputData).

2010.05.03 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added some fixes after trying to run some "real" jobs on
	  PROOF (PQ2) datasets.
	* SCycleController now automatically specifies to PROOF which
	  TTree the cycle should run on. If it's not specified for a
	  D3PD file for which an event selection was applied in Athena
	  (CollectionTree has more entries than the D3PD tree), then the
	  job crashes.
	* Disabled the checking of the metadata trees when running on a
	  dataset. The current implementation of PROOF doesn't catalog
	  the TTree-s inside subdirectories of a file, so the PROOF
	  dataset doesn't know about these metadata trees. This cataloging
	  should be added in a future version of PROOF.

2010.04.30 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added first implementation to support PROOF (PQ2) datasets in
	  the InputData.
	* Created a new singleton class (SProofManager) to handle the
	  PROOF connections. Moved some of the functionality that was
	  previously in SCycleController, to this new class.

2010.04.27 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added a check in SCycleBaseNTuple::ConnectVariable(...) that makes
	  sure that the user tries to connect the correct type of variable
	  to a branch. Previously it was possible to try to connect a
	  primitive variable (bool, int, etc.) to a branch holding let's
	  say a vector<double> variable. In this case ROOT crashed in a
	  quite undecipherable way in the ConnectVariable(...) function.
	  This should not happen anymore, the code will exit with an error
	  message if the user makes this mistake.

2010.04.13 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added a new configuration option to the XML files: <MetadataTree>
	  Using this the user can access additional TTree-s in the input
	  files which don't hold event-level data. The used case for this
	  right now is to be able to read the trigger configuration
	  metadata from the D3PD ntuples.
	* Added a new function in SCycleBaseNTuple to give access to the
	  metadata trees.
	* The metadata trees can also be in subdirectories inside the file,
	  just like it is done with the trigger configuration metadata
	  right now.

2010.04.09 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Fixed the way SCycleBaseConfig handles the case when it receives
	  an empty string as a vector property. (Now the std::vector remains
	  empty.)

2010.04.08 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Created a non-const accessor to the SCycleConfig object
	  of the cycle. This can apparently be used to modify the total
	  luminosity of the cycle for the re-weighting in a nicer fasion,
	  but that doesn't work with PROOF yet...
	* Added a new feature to SCycleBaseConfig: It is now possible to
	  add and retrieve TObject based "configuration objects" to/from
	  the cycle. The model is that the user creates/initializes a
	  configuration object in BeginCycle(), and adds it as a configuration
	  object with AddConfigObject(...). Then the user can retrieve
	  this same object inside the function which are executed
	  on the worker nodes, with GetConfigObject(...). The first example
	  is sending a TGoodRunsList object to the workers, to select
	  the good luminosity blocks out of ATLAS data.
	* This feature needed some modification in SCycleBaseExec, and
	  SCycleController as well.
	* Added some "friend ..." lines to the cycle base classes to make
	  it possible for the new classes in plug-ins to function.
	  I might get rid of these "friend ..." declarations and make all the
	  used functions public in a later release...

2010.03.02 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Made a few smaller changes to revive the SFrameARA packages.
	* SInputData::ValidateInput() is now aware of the persistent
	  trees. The same holds for the TTree information caching.
	* Made SCycleController play nicely with persistent
	  trees.

2009.11.24 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Revived the ISCycleBase class. Now it should be possible once
	  again to write custom cycle base classes in external packages.
	  (Like how the Manchester group does it...)

2009.11.24 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Updated the file information caching in SInputData to
	  save TDSet objects as well. This means that when running
	  with PROOF, neither SFrame nor PROOF will check the files
	  after they've been checked in a previous running.

2009.11.19 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added the capability to "cache" the information about the
	  InputData configuration locally. This means that the input
	  files don't have to be validated at the beginning of each
	  job, which can save many-many minutes in larger jobs.
	* The feature is turned off by default, it can be enabled
	  by adding Cacheable="True" to the InputData definition in
	  the configuration XML. See the example configurations
	  for more details.
	* The cached information is stored in the same way that
	  PROOF stores information about datasets. But by using our
	  own solution, the jobs can still be run without requiring
	  a PROOF server.
	* Removed the possibility of defining EV input trees for a cycle.
	  The framework didn't support such trees ever sice moving to
	  using PROOF anyway.

2009.09.17 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Fixed a problem with using PROOF machines/clusters with
	  a large number of worker nodes.

2009.09.10 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Fixed a crash that happened on SLC4 when shutting down
	  a PROOF connection.

2009.08.19 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Changed the way the files for the output ntuples are
	  closed.

2009.06.23 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Adding first modifications into the SVN repository.
	* Added a new class: SPointer. It's used to clean up the
	  objects created by the ConnectVariable(...) calls.
	  So far there was a memory leak here...
	* Fixed a memory leak in SParLocator::Locate(...) as well.
	* Changed the level of the messages reporing about the
	  event processing status to DEBUG when running in PROOF
	  mode. (In this mode the progress is shown by PROOF
	  anyway...)

2009.05.13 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Modified SLogWriter such that it now only prints the
	  output in different colours if it's being printed on
	  the console. This makes the logfiles easier to read.
	  Unfortunately it also has the sideeffect that all output
	  from the worker nodes appears colourless...
	* Changed SCycleBaseNTuple::ConnectVariable so that it now
	  returns whether it was successful or not.
	* Thanks to Alexander Mann for both of these suggestions!

2009.04.07 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Introduced a new specialisation of
	  SCycleBaseNTuple::ConnectVariable(...). It allows to
	  connect to array inputs very easily. Some documentation
	  about its usage can be found in the source files.

2009.02.24 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Fixed SFileMerger to be able to handle empty TTrees.

2009.01.22 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added new Cycle parameter: ProofWorkDir
	  It specifies where the temporary ntuple files should be
	  put when running on a PROOF cluster. The point is that
	  this location should be writable by all machines taking
	  part in the PROOF running.

2009.01.05 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added missing <cstdlib> includes to fix compilation errors
	  with GCC 4.3. The code is now tested to compile and run
	  on SLC5 and GCC 4.3. :-)

2008.12.02 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Now the job automatically prints the output messages
	  from the worker nodes once the event processing is done.
	* Created a new function called SErrorHandler. It can
	  be used to print the ROOT messages using SLogger.

2008.12.02 David Berge <berge@cern.ch>
	* Fix small bug in SCycleController, now properly checking the
	return code of gSystem->Load('libXX'), which is 1 i.e. not zero if
	the library was already loaded; this last case isn't an error,
	errors are only negative return codes

2008.10.14 Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added the feature to skip events at the beginning of
	  an InputData. The property to specify in the header of
	  the InputData configuration in XML is "NEventsSkip".
	* Updated the format of the output messages during event
	  processing.

2008.03.21. Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added libutil to the list of libraries that sframe_main
	  is lined against. (Needed when compiling with gcc >=4.1)

2008.02.14. Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Now SCycleBaseNTuple opens the input files through
	  TFile::Open(...) rather than creating a TFile object
	  itself. According to Wolfgang, SFrame should play more
	  nicely with dCache and Castor like this...

2008.02.11. Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added new type of property: bool
	  Such properties can now be used in the same way as all
	  the others. See the Doxygen documentation for details.
	* Removed "u_int" in SCycleBaseNTuple.icc that caused problems
	  on MacOS X 10.5 / ROOT 5.18.

2008.02.08. Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Fixed bug in SCycleBaseExec that caused a crash when
	  running over multiple InputData of the same type.

2008.02.01. Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Removed the Doxyfile file from this directory and put
	  it directly under SFrame/
	* Updated/extended the documentation in a number of files.

2008.01.28. Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added memory consumption and memory leak DEBUG printouts.
	  (Should be useful for finding problems with code.)
	* Added new function (SCycleBaseHist::Write(...)) for
	  persistifying non-TH1 objects in the output. (Putting
	  a special emphasis on persistifying TGraph-like
	  objects.) Usage instructions are in the Doxygen
	  documentation.

2008.01.25. Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Made big structural changes in the SCycleBase class.
	  - The SCycleBase class doesn't hold any code itself now,
	  but is "just" a composite object made from the
	  various SCycleBase* classes.
	  - Introduced a new class, SCycleBaseExec. Its function
	  is to provide the event looping functionality to
	  SCycleBase.
	  - All components of SCycleBase have an interface class
	  now. SCycleBaseExec can access the other parts of the
	  SCycleBase object through these interfaces. If the
	  functionality of SCycleBase has to be extended, it's
	  enough to create a new kind of SCycleBase class that
	  inherits from different kind of constituents. (For instance
	  the SCycleBaseNTuple constituent can be replaced
	  while not touching the SCycleBaseExec class.)
	* Extended SInputData. It now holds a new kind of input
	  tree, called "persistent tree". This is used to describe
	  input trees from POOL based DPD files. The name of the
	  persistent tree is practically always "CollectionTree",
	  but it is configurable through XML nevertheless.
	* A new kind of property can be defined for the
	  <JobConfiguration>, <PyLibrary>. It is very similar to
	  the <Library> property, but it defines a Python module
	  that should be loaded by the framework at initialisation.
	* The EventView tree handling functions don't have to be
	  called separately by SCycleBaseExec anymore. They are
	  called internally in SCycleBaseNTuple by the functions
	  that used to only handle the regular input trees. (This
	  way the transient input trees can be handled just by
	  overwriting these functions.)

2007.11.26. Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added something to SCycleBaseHist that I wanted to do
	  for a while now: the SCycleBaseHist::Hist(...)
	  function. It can be used to *quickly* retrieve
	  (1-dimensional) histograms from the output file. It
	  proved to be very useful for me when handling a lot
	  of output histograms. See the Doxygen documentation
	  for further details.:-)

2007.11.22. Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Added a *lot* of Doxygen documentation to the code.
	  Added a new directory called "doc/" which contains a
	  single header (mainpage.h) by default, and in which
	  the HTML documentation is put by Doxygen when calling
	  "doxygen" in the current directory.
	* Added a file called "Doxyfile" that describes the
	  project to Doxygen. It is currently configured to use
	  a tool called "dot" to create the graphs for the
	  documentation. Unfortunately it is not available on
	  SLC by default, but it can easily be installed. To
	  disable the usage of "dot", change the line in the
	  configuration file

	    HAVE_DOT = YES

	  to

	    HAVE_DOT = NO

2007.11.20. Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Disabled the "parameter-less" running of sframe_main.
	  Now one always has to define exactly one XML file on
	  the command prompt, else the usage help is printed.
	* Added the possibility to use a new feature of ROOT.
	  (Awailable in ROOT >= 5.17/04) This new feature makes
	  it possible to use a bit more complicated XML files
	  for configuring the job. It is only used when compiling
	  against a proper ROOT version. (Pre-processor
	  conditional statements rule...)

2007.11.13. Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
	* Created first version of the "SFrameCore" library.
	* The makefile also automatically compiles and links the
	  "sframe_main" executable. One shortcoming is that
	  "make clean" doesn't delete the executable...
	* Added appropriate headers with the SFrame authors to
	  all the files.
	* Used a little C++ magic in SCycleBase to make it impossible
	  for the users to call internal functions of the class that
	  they're not supposed to.
