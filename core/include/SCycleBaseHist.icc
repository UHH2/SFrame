// Dear emacs, this is -*- c++ -*-
// $Id$
/***************************************************************************
 * @Project: SFrame - ROOT-based analysis framework for ATLAS
 * @Package: Core
 *
 * @author Stefan Ask       <Stefan.Ask@cern.ch>           - Manchester
 * @author David Berge      <David.Berge@cern.ch>          - CERN
 * @author Johannes Haller  <Johannes.Haller@cern.ch>      - Hamburg
 * @author A. Krasznahorkay <Attila.Krasznahorkay@cern.ch> - NYU/Debrecen
 *
 ***************************************************************************/

#ifndef SFRAME_CORE_SCycleBaseHist_ICC
#define SFRAME_CORE_SCycleBaseHist_ICC

// ROOT include(s):
#include <TROOT.h>
#include <TH1.h>
#include <TSelectorList.h>
#include <TDirectory.h>
#include <TKey.h>

// Local include(s):
#include "SCycleOutput.h"

/**
 * Function for creating any kind of object inheriting from TH1 and
 * which has a correct dictionary loaded, in the output file. You either
 * have to give it an already existing object, which will be copied to
 * the output, or you can use a formalism like this:
 *
 * <code>
 *   TH1D* hist = Book( TH1D( "hist", "Histogram", 100, 0.0, 100.0 ) );
 * </code>
 *
 * @warning The function returns a pointer to the created object.
 *          It is a good practice to keep the pointer to
 *          the object, as SCycleBaseHist::Book and
 *          SCycleBaseHist::Retrieve are quite slow.
 *
 * @see SCycleBaseHist::Retrieve
 * @see SCycleBaseHist::Hist
 *
 * @param histo The object (usually histogram) to put into the output
 * @param directory Optional directory name where the object should end up
 * @param inFile If set to <code>kTRUE</code>, the object will be merged
 *               using the output file, and not in memory
 */
template< class T >
T* SCycleBaseHist::Book( const T& histo,
                         const char* directory,
                         Bool_t inFile ) throw( SError ) {

   // Put the object into our temporary directory in memory:
   GetTempDir()->cd();

   // Construct a full path name for the object:
   TString path = ( directory ? directory + TString( "/" ) : "" ) +
      TString( histo.GetName() );

   // Decide which TList to store the object in:
   TList* output = ( inFile ? &m_fileOutput : m_proofOutput );

   // Check if the object was already added:
   SCycleOutput* out =
      dynamic_cast< SCycleOutput* >( output->FindObject( path ) );

   // If not, add it now:
   if( ! out ) {
      out = new SCycleOutput( histo.Clone(), path, directory );
#if ROOT_VERSION_CODE < ROOT_VERSION( 5, 34, 12 )
      output->TList::AddLast( out );
#else
      if( inFile ) {
         m_fileOutput.AddLast( out );
      } else {
         m_proofOutput->THashList::AddLast( out );
      }
#endif // ROOT_VERSION
      REPORT_VERBOSE( "Added new object with name \"" << histo.GetName()
                      << "\" in directory \"" << ( directory ? directory : "" )
                      << "\"" );
   }

   // Get the pointer to the created object:
   T* ret = dynamic_cast< T* >( out->GetObject() );

   gROOT->cd(); // So that the temporary objects would be
                // created in a general memory space.

   // Calculate the statistical uncertainties correctly for
   // weighted histograms:
   TH1* hist = dynamic_cast< TH1* >( ret );
   if( hist ) {
      if( ( ! TH1::GetDefaultSumw2() ) && ( ! hist->GetSumw2N() ) ) {
         hist->Sumw2();
      }
   }

   // Return the object pointer:
   return ret;
}

/**
 * Function searching for any kind of object (inheriting from TObject).
 * First the function searches for the object in the output object list,
 * and if it doesn't find it there, it looks for it in the currently open
 * input file.
 *
 * You have to specify the return type to the
 * function explicitely, as the compiler can't know this from the
 * argument list.
 *
 * Example:
 *
 * <code>
 *   TH1* hist = Retrieve< TH1 >( "hist" );
 * </code>
 *
 * @see SCycleBaseHist::Book
 * @param name The name of the object you're looking for
 * @param directory The directory the object is supposed to be in
 * @param outputOnly Search only amongst the output objects of the cycle
 * @returns A pointer to the object in question, or a null pointer if the
 *          object can't be found
 */
template< class T >
T* SCycleBaseHist::Retrieve( const char* name,
                             const char* directory,
                             Bool_t outputOnly ) throw( SError ) {

   // Just to make sure that we're in the default directory in
   // memory:
   gROOT->cd();

   // Construct a path name from the specified parameters:
   const TString path = ( directory ? directory + TString( "/" ) : "" ) +
      TString( name );

   // Pointer to the requested object:
   T* result = 0;

   //
   // Try to find this object in the output PROOF list:
   //
   SCycleOutput* out =
      dynamic_cast< SCycleOutput* >( m_proofOutput->FindObject( path ) );
   if( out ) {
      result = dynamic_cast< T* >( out->GetObject() );
      if( ! result ) {
         REPORT_ERROR( "Output object with name \"" << name << "\" found in "
                       << "directory \"" << ( directory ? directory : "" )
                       << "\" but is not of the requested type" );
         SError error( SError::SkipCycle );
         error << "No object found in the holder with name: " << name
               << " in directory: " << directory;
         throw error;
      }
      return result;
   }

   //
   // Try to find this object in our private object list:
   //
   out = dynamic_cast< SCycleOutput* >( m_fileOutput.FindObject( path ) );
   if( out ) {
      result = dynamic_cast< T* >( out->GetObject() );
      if( ! result ) {
         REPORT_ERROR( "Output object with name \"" << name << "\" found in "
                       << "directory \"" << ( directory ? directory : "" )
                       << "\" but is not of the requested type" );
         SError error( SError::SkipCycle );
         error << "No object found in the holder with name: " << name
               << " in directory: " << directory;
         throw error;
      }
      return result;
   }

   // Return gracefully if the input should not be checked:
   if( outputOnly ) {
      REPORT_VERBOSE( "Object not found in output: " << path );
      return 0;
   }

   // Check that we have an input file already specified:
   if( ! m_inputFile ) {
      REPORT_ERROR( "No input file defined, and requested object "
                    "not found in output list" );
      throw SError( "No input file defined, and requested object "
                    "not found in output list", SError::SkipCycle );
   }

   //
   // Try to find this object inside the input file:
   //
   result = dynamic_cast< T* >( m_inputFile->Get( path ) );
   if( ! result ) {
      REPORT_ERROR( "Couldn't access object with path: " << path );
      SError error( SError::SkipCycle );
      error << "Couldn't access object with name: " << name
            << " in directory: " << directory;
      throw error;
   }

   return result;
}

/**
 * This function can be used to retrieve all versions of a given object from the
 * input file. It doesn't search in the output list, as each object should only
 * be present in one version in the output.
 *
 * The main use-case for this function right now is to be able to read the
 * lumiblock metadata from input ATLAS D3PDs.
 *
 * Example:
 *
 *   <code>
 *     std::vector< TObjString* > lumiblocks =
 *        RetrieveAll< TObjString* >( "physics", "Lumi" );
 *   </code>
 *
 * @param name The name of the object(s) we're looking for
 * @param directory The directory in which the object(s) is/are located
 * @returns A vector of pointers to the objects found
 */
template< class T >
std::vector< T* >
SCycleBaseHist::RetrieveAll( const char* name,
                             const char* directory ) throw( SError ) {

   // The result object:
   std::vector< T* > result;

   // Decide which directory to search in:
   TDirectory* dir = m_inputFile;
   if( directory ) {
      dir = dynamic_cast< TDirectory* >( m_inputFile->Get( directory ) );
      // If the requestested directory doesn't exist that's not necessariy an
      // error condition:
      if( ! dir ) {
         m_logger << ::DEBUG << "Directory \"" << directory
                  << "\" doesn't exist in the input file" << SLogger::endmsg;
         return result;
      }
   }

   // Get a list of all keys from the directory:
   TList* keyList = dir->GetListOfKeys();
   // Search for objects of the specified name:
   for( Int_t i = 0; i < keyList->GetEntries(); ++i ) {
      // Convert object to a TKey:
      TKey* key = dynamic_cast< TKey* >( keyList->At( i ) );
      if( ! key ) {
         REPORT_ERROR( "Couldn't cast to TKey. "
                       "There is some problem in the code" );
         throw SError( "Couldn't cast to TKey. "
                       "There is some problem in the code",
                       SError::StopExecution );
      }
      // Check if the object has the right name:
      if( strcmp( key->GetName(), name ) ) continue;
      // Check if this object is of the right type:
      T* obj =
         dynamic_cast< T* >( dir->Get( TString( key->GetName() ) + ";" +
                                       TString::Format( "%hi",
                                                        key->GetCycle() ) ) );
      if( ! obj ) continue;
      // Add it to our output:
      result.push_back( obj );
   }

   // Return the full list:
   return result;
}

#endif // SFRAME_CORE_SCycleBaseHist_ICC
